// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// enable prismaSchemaFolder feature

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
  // previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  firstName             String                  @map("first_name")
  lastName              String                  @map("last_name")
  email                 String
  phone                 String
  metaData              Json                    @map("meta_data") @db.JsonB
  campaignUpdateHistory CampaignUpdateHistory[]
  campaigns             Campaign[]

  @@map("user")
}

enum ContentType {
  aiChatPrompt
  aiContentTemplate
  articleCategory
  blogArticle
  blogHome
  blogSection
  candidateTestimonial
  election
  faqArticle
  faqOrder
  glossaryItem
  goodPartyTeamMembers
  onboardingPrompts
  pledge
  privacyPage
  promptInputFields
  redirects
  teamMember
  teamMilestone
  termsOfService
}

model Content {
  createdAt DateTime?   @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  id        String      @id
  type      ContentType
  data      Json        @db.JsonB

  @@index([type])
  @@map("content")
}

model PathToVictory {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId Int      @unique @map("campaign_id")
  data       Json     @db.JsonB

  @@index([campaignId])
  @@map("path_to_victory")
}

enum CampaignUpdateHistoryType {
  doorKnocking
  calls
  digital
  directMail
  digitalAds
  text
  events
  yardSigns
}

model CampaignUpdateHistory {
  id         Int                       @id @default(autoincrement())
  createdAt  DateTime                  @default(now()) @map("created_at")
  updatedAt  DateTime                  @updatedAt @map("updated_at")
  campaign   Campaign                  @relation(fields: [campaignId], references: [id])
  campaignId Int                       @map("campaign_id")
  user       User                      @relation(fields: [userId], references: [id])
  userId     Int                       @map("user_id")
  type       CampaignUpdateHistoryType
  quantity   Int

  @@index([campaignId])
  @@map("campaign_update_history")
}

enum CampaignTier {
  WIN
  LOSE
  TOSSUP
}

model Campaign {
  id                    Int                     @id @default(autoincrement())
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  slug                  String                  @unique
  isActive              Boolean?                @map("is_active")
  isVerified            Boolean?                @map("is_verified")
  isPro                 Boolean?                @default(false) @map("is_pro")
  isDemo                Boolean                 @default(false) @map("is_demo")
  didWin                Boolean?                @map("did_win")
  dateVerified          DateTime?               @map("date_verified")
  tier                  CampaignTier?
  data                  Json                    @default("{}") @db.JsonB
  details               Json                    @default("{}") @db.JsonB
  aiContent             Json                    @default("{}") @map("ai_content") @db.JsonB
  vendorTsData          Json                    @default("{}") @map("vendor_ts_data") @db.JsonB
  pathToVictory         PathToVictory?
  campaignUpdateHistory CampaignUpdateHistory[]
  user                  User?                   @relation(fields: [userId], references: [id])
  userId                Int?                    @map("user_id")
  topIssues             TopIssue[]
  campaignPositions     CampaignPosition[]

  @@index([slug])
  @@map("campaign")
}

model Position {
  id                String             @id @default(cuid())
  name              String             @unique
  topIssue          TopIssue?          @relation(fields: [topIssueId], references: [id])
  topIssueId        String?
  campaignPositions CampaignPosition[]

  @@map("position")
}

model TopIssue {
  id                String             @id @default(cuid())
  name              String             @unique
  icon              String?
  positions         Position[]
  campaigns         Campaign[]
  campaignPositions CampaignPosition[]

  @@map("top_issue")
}

model CampaignPosition {
  id          String    @id @default(cuid())
  description String?
  order       Int?
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  campaignId  Int
  position    Position  @relation(fields: [positionId], references: [id])
  positionId  String
  topIssue    TopIssue? @relation(fields: [topIssueId], references: [id])
  topIssueId  String?

  @@index([campaignId])
  @@index([positionId])
  @@map("campaign_position")
}
