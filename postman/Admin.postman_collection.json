{
	"info": {
		"_postman_id": "06d2a5e0-334e-45f2-b837-5d3f6cf920b9",
		"name": "Admin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40398491",
		"_collection_link": "https://goodpartyorg.postman.co/workspace/GP-API~66e2b59d-bf6a-4380-81c2-1cbf2d01bddf/collection/38094541-06d2a5e0-334e-45f2-b837-5d3f6cf920b9?action=share&source=collection_link&creator=40398491"
	},
	"item": [
		{
			"name": "Campaigns",
			"item": [
				{
					"name": "Admin Login [email:password]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Token should be set on response body', () => {",
									"    const {token} = pm.response.json()",
									"    pm.expect(token).to.be.ok",
									"    pm.environment.set('authToken', token)",
									"})",
									"",
									"pm.test('user should be returned WITHOUT password', () => {",
									"    const {user} = pm.response.json()",
									"    pm.expect(user).to.be.ok",
									"    pm.expect(user.password).to.not.be.ok",
									"})",
									"",
									"pm.test('user should have \"admin\" role', () => {",
									"    const {user} = pm.response.json()",
									"    pm.expect(user.roles.includes('admin')).to.be.ok",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{testAdminUserEmail}}\",\n    \"password\": \"{{testUserPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rootUrl}}/authentication/login",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"authentication",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Campaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"",
									"    const response = pm.response.json();",
									"    const { email } = JSON.parse(pm.request.body)",
									"    pm.collectionVariables.set(\"adminUpdateCampaignId\", response.id);",
									"    pm.collectionVariables.set(\"adminCreateCampaignEmail\", email);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"zip\": \"90210\",\n    \"party\": \"Other\",\n    \"otherParty\": \"Pizza Party\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rootUrl}}/admin/campaigns",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"admin",
								"campaigns"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Campaign - Email Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 409', () => {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"email\": \"{{adminCreateCampaignEmail}}\",\n    \"zip\": \"90210\",\n    \"party\": \"Other\",\n    \"otherParty\": \"Pizza Party\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rootUrl}}/admin/campaigns",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"admin",
								"campaigns"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Campaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"    const { isPro, isVerified, didWin } = JSON.parse(pm.request.body)",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.isPro).to.eq(isPro)",
									"    pm.expect(response.isVerified).to.eq(isVerified)",
									"    pm.expect(response.didWin).to.eq(didWin)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isPro\": {{$randomBoolean}},\n    \"isVerified\": {{$randomBoolean}},\n    \"didWin\": {{$randomBoolean}},\n    \"tier\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rootUrl}}/admin/campaigns/{{adminUpdateCampaignId}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"admin",
								"campaigns",
								"{{adminUpdateCampaignId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Campaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status 204', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{rootUrl}}/admin/campaigns/{{adminUpdateCampaignId}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"admin",
								"campaigns",
								"{{adminUpdateCampaignId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Victory Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{rootUrl}}/admin/campaigns/1/send-victory-email",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"admin",
								"campaigns",
								"1",
								"send-victory-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pro No Voter File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 ', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rootUrl}}/admin/campaigns/pro-no-voter-file",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"admin",
								"campaigns",
								"pro-no-voter-file"
							]
						}
					},
					"response": []
				},
				{
					"name": "P2V Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 ', () => {",
									"    pm.response.to.have.status(200);",
									"",
									"    resp = pm.response.json()",
									"",
									"    pm.expect(resp.auto).to.be.a('number')",
									"    pm.expect(resp.manual).to.be.a('number')",
									"    pm.expect(resp.pending).to.be.a('number')",
									"    pm.expect(resp.total).to.be.a('number')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rootUrl}}/admin/campaigns/p2v-stats",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"admin",
								"campaigns",
								"p2v-stats"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Admin Login [email:password] Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Token should be set on response body', () => {",
									"    const {token} = pm.response.json()",
									"    pm.expect(token).to.be.ok",
									"    pm.environment.set('authToken', token)",
									"})",
									"",
									"pm.test('user should be returned WITHOUT password', () => {",
									"    const {user} = pm.response.json()",
									"    pm.expect(user).to.be.ok",
									"    pm.expect(user.password).to.not.be.ok",
									"})",
									"",
									"pm.test('user should have \"admin\" role', () => {",
									"    const {user} = pm.response.json()",
									"    pm.expect(user.roles.includes('admin')).to.be.ok",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{testAdminUserEmail}}\",\n    \"password\": \"{{testUserPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rootUrl}}/authentication/login",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"authentication",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.expect(pm.response.json().length).to.be.gt(0)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rootUrl}}/admin/users?dateRange=last 30 days",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "dateRange",
									"value": "last 30 days"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"",
									"     const user = pm.response.json()",
									"",
									"    pm.expect(user.id).to.be.a('number')",
									"    pm.collectionVariables.set('adminUserId', user.id)",
									"    pm.collectionVariables.set('impersonateUserEmail', user.email)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"roles\": [\"candidate\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rootUrl}}/admin/users",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Impersonate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { expectedStatusCode } = pm.require('@goodpartyorg/shared')",
									"",
									"expectedStatusCode(200)",
									"",
									"pm.test('returns auth token and user object', () => {",
									"    const resp = pm.response.json()",
									"",
									"    pm.expect(resp.user.email).to.be.a.string",
									"    pm.expect(resp.token).to.be.a.string",
									"})"
								],
								"type": "text/javascript",
								"packages": {
									"@goodpartyorg/shared": {
										"id": "01936a27-2b0d-7c4d-92a0-037b1dd5aa96"
									}
								}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{impersonateUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rootUrl}}/admin/users/impersonate",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"admin",
								"users",
								"impersonate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{rootUrl}}/admin/users/{{adminUserId}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"admin",
								"users",
								"{{adminUserId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "adminUpdateCampaignId",
			"value": "",
			"type": "default"
		},
		{
			"key": "adminCreateCampaignEmail",
			"value": ""
		},
		{
			"key": "adminCampaignUserId",
			"value": ""
		},
		{
			"key": "adminUserId",
			"value": ""
		},
		{
			"key": "impersonateUserEmail",
			"value": ""
		}
	]
}