name: Postman Tests

on:
  # Run on all pushes
  push:
    branches:
      - '*'
  
  # Run on all PRs
  pull_request:
  
  # Daily run at midnight UTC
  schedule:
    - cron: '0 0 * * *'
  
  # Manual trigger
  workflow_dispatch:

jobs:
  postman-tests:
    runs-on: ubuntu-latest

    # Add debug info to see what's triggering the workflow
    steps:
      - name: Debug Event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Branch name: ${{ github.ref }}"
          echo "PR number: ${{ github.event.pull_request.number }}"
          echo "SHA: ${{ github.sha }}"

      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        
      # Install Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install Newman and dependencies
      - name: Install Newman and Dependencies
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra

      # Create environment file for tests
      - name: Create Test Environment
        run: |
          # Copy the existing environment file
          cp postman/environment.json test_env.json

          # Update the environment variables
          jq --arg protocol "https" \
             --arg host "gp-api-dev.goodparty.org" \
             --arg port "" \
             --arg email "${{ secrets.ADMIN_EMAIL }}" \
             --arg password "${{ secrets.ADMIN_PASSWORD }}" \
             '(.values[] | select(.key == "protocol").value) = $protocol |
              (.values[] | select(.key == "host").value) = $host |
              (.values[] | select(.key == "port").value) = $port |
              (.values[] | select(.key == "testAdminUserEmail").value) = $email |
              (.values[] | select(.key == "testUserPassword").value) = $password' \
             test_env.json > updated_env.json

      # Create results directory
      - name: Create Results Directory
        run: mkdir -p testResults

      # Run All Collections
      - name: Run All Collections
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          # Create a temporary file for the summary
          touch summary.txt
          echo "API Test Results Summary:" > summary.txt
          echo "" >> summary.txt
          
          # Array of collection IDs
          declare -A collections=(
            ["Admin"]="${{ secrets.ADMIN_COLLECTION_ID }}"
            ["Authentication"]="${{ secrets.AUTHENTICATION_COLLECTION_ID }}"
            ["Authentication [Social OAuth]"]="${{ secrets.AUTHENTICATION_OAUTH_COLLECTION_ID }}"
            ["Campaigns"]="${{ secrets.CAMPAIGNS_COLLECTION_ID }}"
            ["CMS Content"]="${{ secrets.CMS_CONTENT_COLLECTION_ID }}"
            ["Elections"]="${{ secrets.ELECTIONS_COLLECTION_ID }}"
            ["Error Logger"]="${{ secrets.ERROR_LOGGER_COLLECTION_ID }}"
            ["Generate Signed Upload Url"]="${{ secrets.GENERATE_SIGNED_UPLOAD_URL_COLLECTION_ID }}"
            ["Health"]="${{ secrets.HEALTH_COLLECTION_ID }}"
            ["Integrations"]="${{ secrets.INTEGRATIONS_COLLECTION_ID }}"
            ["Jobs (Ashby)"]="${{ secrets.JOBS_ASHBY_COLLECTION_ID }}"
            ["Payments"]="${{ secrets.PAYMENTS_COLLECTION_ID }}"
            ["Subscribe"]="${{ secrets.SUBSCRIBE_COLLECTION_ID }}"
            ["TopIssues"]="${{ secrets.TOP_ISSUES_COLLECTION_ID }}"
            ["Users"]="${{ secrets.USERS_COLLECTION_ID }}"
            ["VoterData"]="${{ secrets.VOTER_DATA_COLLECTION_ID }}"
          )
          
          # Run each collection
          for name in "${!collections[@]}"; do
            collection_id=${collections[$name]}
            echo "Running collection: $name"
            
            # Run newman and capture output
            output=$(newman run "https://api.getpostman.com/collections/${collection_id}?apikey=${{ secrets.POSTMAN_API_KEY }}" \
              -e updated_env.json \
              --reporters cli,json,htmlextra \
              --reporter-json-export "testResults/${name// /_}-report.json" \
              --reporter-htmlextra-export "testResults/${name// /_}-report.html" \
              --suppress-exit-code 2>&1) || true
            
            # Extract test results
            passed=$(echo "$output" | grep -o "│.*assertions.*│" | awk -F'│' '{print $3}' | tr -d ' ')
            total=$(echo "$output" | grep -o "│.*assertions.*│" | awk -F'│' '{print $4}' | tr -d ' ')
            
            if [ -z "$passed" ] || [ -z "$total" ]; then
              # Fallback to counting ✓ and × if we can't get the summary
              passed=$(echo "$output" | grep -o "✓.*" | wc -l)
              failed=$(echo "$output" | grep -o "×.*" | wc -l)
              total=$((passed + failed))
            else
              failed=$((total - passed))
            fi
            
            # Add to summary file
            if [ $failed -eq 0 ] && [ $total -gt 0 ]; then
              status="✅"
            elif [ $total -eq 0 ]; then
              status="⚠️"
            else
              status="❌"
            fi
            echo "$status $name: $passed passed, $failed failed" >> summary.txt
          done
          
          # Set the environment variable with the full summary
          summary=$(cat summary.txt)
          echo "summary_text<<EOF" >> $GITHUB_ENV
          echo "$summary" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Upload test results as artifacts
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: testResults

      # Send Slack notification
      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SUMMARY: ${{ env.summary_text }}
        run: |
          # Escape newlines and quotes for JSON
          ESCAPED_SUMMARY=$(echo "$SUMMARY" | jq -aRs .)
          
          # Create the payload
          payload=$(cat <<EOF
          {
            "text": "API Test Results",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "API Test Results"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ${ESCAPED_SUMMARY}
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                }
              }
            ]
          }
          EOF
          )
          
          # Send to Slack
          curl -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$payload" \
            "https://slack.com/api/chat.postMessage?channel=${{ secrets.SLACK_CHANNEL_ID }}"
