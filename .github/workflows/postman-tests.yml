name: Postman Tests

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight
  workflow_dispatch:  # Allows manual trigger

jobs:
  postman-tests:
    runs-on: ubuntu-latest
    # Add permissions for GITHUB_TOKEN if needed
    permissions:
      contents: read
      pull-requests: write

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        
      # Install Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install Newman and dependencies
      - name: Install Newman and Dependencies
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra

      # Create environment file for tests
      - name: Create Test Environment
        run: |
          # Copy the existing environment file
          cp postman/environment.json test_env.json

          # Update the environment variables
          jq --arg protocol "https" \
             --arg host "gp-api-dev.goodparty.org" \
             --arg port "" \
             --arg email "${{ secrets.ADMIN_EMAIL }}" \
             --arg password "${{ secrets.ADMIN_PASSWORD }}" \
             '(.values[] | select(.key == "protocol").value) = $protocol |
              (.values[] | select(.key == "host").value) = $host |
              (.values[] | select(.key == "port").value) = $port |
              (.values[] | select(.key == "testAdminUserEmail").value) = $email |
              (.values[] | select(.key == "testUserPassword").value) = $password' \
             test_env.json > updated_env.json

      # Create results directory
      - name: Create Results Directory
        run: mkdir -p testResults

      # Run All Collections
      - name: Run All Collections
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        shell: bash
        run: |
          # Create a temporary file for the summary
          touch test_summary.txt
          
          # Array of collection IDs
          declare -A collections=(
            ["Admin"]="${{ secrets.ADMIN_COLLECTION_ID }}"
            ["Authentication"]="${{ secrets.AUTHENTICATION_COLLECTION_ID }}"
            ["Authentication [Social OAuth]"]="${{ secrets.AUTHENTICATION_OAUTH_COLLECTION_ID }}"
            ["Campaigns"]="${{ secrets.CAMPAIGNS_COLLECTION_ID }}"
            ["CMS Content"]="${{ secrets.CMS_CONTENT_COLLECTION_ID }}"
            ["Elections"]="${{ secrets.ELECTIONS_COLLECTION_ID }}"
            ["Error Logger"]="${{ secrets.ERROR_LOGGER_COLLECTION_ID }}"
            ["Generate Signed Upload Url"]="${{ secrets.GENERATE_SIGNED_UPLOAD_URL_COLLECTION_ID }}"
            ["Health"]="${{ secrets.HEALTH_COLLECTION_ID }}"
            ["Integrations"]="${{ secrets.INTEGRATIONS_COLLECTION_ID }}"
            ["Jobs (Ashby)"]="${{ secrets.JOBS_ASHBY_COLLECTION_ID }}"
            ["Payments"]="${{ secrets.PAYMENTS_COLLECTION_ID }}"
            ["Subscribe"]="${{ secrets.SUBSCRIBE_COLLECTION_ID }}"
            ["TopIssues"]="${{ secrets.TOP_ISSUES_COLLECTION_ID }}"
            ["Users"]="${{ secrets.USERS_COLLECTION_ID }}"
            ["VoterData"]="${{ secrets.VOTER_DATA_COLLECTION_ID }}"
          )
          
          # Set bash to continue on errors
          set +e
          
          total_passed=0
          total_failed=0
          
          # Run each collection and build summary
          summary="*API Test Results*\n\n"
          
          for name in "${!collections[@]}"; do
            collection_id=${collections[$name]}
            echo "Running collection: $name"
            
            # Run newman and capture output
            output=$(newman run "https://api.getpostman.com/collections/${collection_id}?apikey=${{ secrets.POSTMAN_API_KEY }}" \
              -e updated_env.json \
              --reporters cli,json,htmlextra \
              --reporter-json-export "testResults/${name// /_}-report.json" \
              --reporter-htmlextra-export "testResults/${name// /_}-report.html" \
              2>&1) || true
            
            # Print newman output for debugging
            echo "$output"
            
            # Extract test results from the summary table
            # Look for the line with "assertions" and get the numbers
            if echo "$output" | grep -q "assertions"; then
              # Get the line containing "assertions" and extract numbers
              assertion_line=$(echo "$output" | grep "assertions" | tail -n 1)
              total_assertions=$(echo "$assertion_line" | awk '{print $3}')
              failed_assertions=$(echo "$assertion_line" | awk '{print $5}')
              
              # Handle empty or invalid values
              if [ -z "$total_assertions" ]; then
                total_assertions=0
              fi
              if [ -z "$failed_assertions" ]; then
                failed_assertions=0
              fi
              
              # Calculate passed assertions
              passed=$((total_assertions - failed_assertions))
              
              # Update totals
              total_passed=$((total_passed + passed))
              total_failed=$((total_failed + failed_assertions))
              
              # Set status based on failed assertions
              if [ $failed_assertions -gt 0 ]; then
                status="❌"
              else
                status="✅"
              fi
              
              # Add to summary if there were any tests
              if [ $total_assertions -gt 0 ]; then
                summary+="$status $name: $passed passed, $failed_assertions failed ($total_assertions total)\n"
              fi
            fi
          done
          
          # Add summary line with more detail
          summary+="\n---\n"
          summary+="Total: $total_passed passed, $total_failed failed ($((total_passed + total_failed)) total)"

          # Set the summary as an environment variable
          echo "summary_text=\`\`\`$summary\`\`\`" >> $GITHUB_ENV

      # Upload test results as artifacts
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: testResults

      # Send Slack notification
      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "${{ env.summary_text }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.summary_text }}\n\n👉 <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
